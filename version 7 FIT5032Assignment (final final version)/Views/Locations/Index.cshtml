@model IEnumerable<FIT5032Assignment.Models.Location>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div id='map' style='width: 100%; height: 500px;' class="col-lg-12"></div>

@*<h2>Index</h2>

    <p>
        @Html.ActionLink("Create New", "Create")
    </p>
    <table class="table">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Latitude)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Longitude)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Karaoke.Venue)
            </th>
            <th></th>
        </tr>

        @foreach (var item in Model)
        {
            <tr>
                <td class="latitude">
                    @Html.DisplayFor(modelItem => item.Latitude)
                </td>
                <td class="longitude">
                    @Html.DisplayFor(modelItem => item.Longitude)
                </td>
                <td class="coordinates">
                    @Html.DisplayFor(modelItem => item.Karaoke.Venue)
                </td>
                <td>
                    @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                    @Html.ActionLink("Details", "Details", new { id = item.Id }) |
                    @Html.ActionLink("Delete", "Delete", new { id = item.Id })
                </td>
            </tr>
        }
    </table>*@
    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Latitude)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Longitude)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Karaoke.Venue)
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                @Html.ActionLink("Details", "Details", new { id = item.Id }) |
                @Html.ActionLink("Delete", "Delete", new { id = item.Id })
            </td>
        </tr>
    }

@section Scripts {
    <script src='https://api.mapbox.com/mapbox-gl-js/v1.3.2/mapbox-gl.js'></script>
    <script src='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.4.2/mapbox-gl-geocoder.min.js'></script>

    <script>
        mapboxgl.accessToken = 'pk.eyJ1IjoiZGNoZTAwNDUiLCJhIjoiY2sweDZ4cWNrMDNqdjNjcjVjeW1yaGltaiJ9.Z_HbsLbD79NHQrgcigiX_g';

        var map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/light-v10',
            center: [144.963058, -37.813629],
            zoom: 10
        });

        const makeFeature = function (lat, lng, title, desc) {
            return {
                type: 'Feature',
                geometry: {
                    type: 'Point',
                        coordinates: [lng, lat]
                    },
                    properties: {
                    title: title,
                        description: desc
                    }
            }
        }

        var geojson = {
            type: 'FeatureCollection',
            features: [
            ]
        };

        @foreach (var item in Model) {
                <text>geojson.features.push(makeFeature(@item.Latitude, @item.Longitude, '@item.Karaoke.Venue', '@item.Karaoke.Address'))</text>
            }

        // add markers to map
        geojson.features.forEach(function (marker) {

        // create a HTML element for each feature
            var el = document.createElement('div');
            el.className = 'marker';

            new mapboxgl.Marker(el)
                .setLngLat(marker.geometry.coordinates)
                .setPopup(new mapboxgl.Popup({ offset: 25 }) // add popups
                    .setHTML('<h3>' + marker.properties.title + '</h3><p>' + marker.properties.description + '</p>'))
                .addTo(map);
        });

        // Search location
        map.addControl(new MapboxGeocoder({
            accessToken: mapboxgl.accessToken
        }))

        // Add geolocate control to the map.
        map.addControl(new mapboxgl.GeolocateControl({
            positionOptions: {
                enableHighAccuracy: true
            },
            trackUserLocation: true
        }));

        // Zoom
        map.addControl(new mapboxgl.NavigationControl());

    </script>
}

<link href='https://api.mapbox.com/mapbox-gl-js/v1.3.2/mapbox-gl.css' rel='stylesheet' />
<link rel='stylesheet' href='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.4.2/mapbox-gl-geocoder.css' type='text/css' />
<style>
    /*#map {
        position: absolute;
        top: 0;
        bottom: 0;
        width: 100%;
    }*/

    .marker {
        background-image: url('../../Content/marker.png');
        background-size: cover;
        width: 30px;
        height: 30px;
        border-radius: 50%;
        cursor: pointer;
    }

    .mapboxgl-popup {
        max-width: 200px;
    }

    .mapboxgl-popup-content {
        text-align: center;
        font-family: 'Open Sans', sans-serif;
    }
</style>
